from enum import Enum
import numpy as np

class Dataset(Enum):
    NTU_RGB = 1
    PKUMMD = 2

class NormType(Enum):
    NORM_NECK_TORSO = 1
    NORM_JOINT_DIFF = 2
    NORM_SKEL_REF = 3
    NORM_BONE_UNIT_VEC = 4
    NO_NORM = 5

class RotType(Enum):
    ROT_POSE = 1
    ROT_SEQ = 2
    ROT_POSE_REF = 3
    ROT_SEQ_REF = 4
    NO_ROT = 5

class FuseType(Enum):
    NONE = 0
    OPT_POSE = 1
    MID_VIEW_ONLY = 2
    OPT_POSE_KALMAN = 3

BONE_LENGTHS_KV2 = np.array([0.30795636, 0.22621259, 0.07409099, 0.14628882, 
                             0.16181573, 0.2346938 , 0.21743507, 0.05709619, 
                             0.16181573, 0.2346938 , 0.21743507, 0.05709619, 
                             0.09148038, 0.37058368, 0.34455223, 0.1129149,
                             0.09148038, 0.37058368, 0.34455223, 0.1129149,
                             0.06625761, 0.07307574, 0.06625761, 0.07307574])


#(child joint ind, parent joint ind)
LINKS_KINECT_V2 = np.array([
    (1, 0), (20, 1), (2, 20), (3, 2), 
    (4, 20), (5, 4), (6, 5), (7, 6),
    (8, 20), (9, 8), (10, 9), (11, 10),
    (12, 0), (13, 12), (14, 13), (15, 14),
    (16, 0), (17, 16), (18, 17), (19, 18),
    (21, 7), (22, 7), (23, 11), (24, 11)
])

JOINTS_OMIT = np.array([15, 19, 21, 22, 23, 24])
JOINTS_KEEP = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20])

CENTER_COORD_SYS = np.array([[1, 0, 0],
                             [0, 1, 0],
                             [0, 0, -1]]).astype(np.float32)


KINECT_SKEL_REF = np.array([[ 0.        ,  0.        ,  0.        ],
                            [-0.01544012,  0.30752476,  0.00521961],
                            [-0.02980395,  0.60733062, -0.0026512 ],
                            [-0.0387443 ,  0.75324962,  0.00265299],
                            [-0.18116567,  0.48804276,  0.01441691],
                            [-0.20616831,  0.25809156, -0.02531335],
                            [-0.132689  ,  0.09701341, -0.15153787],
                            [-0.08590882,  0.06664935, -0.16376955],
                            [ 0.12719932,  0.49085114, -0.02635749],
                            [ 0.20759946,  0.27451714, -0.06897905],
                            [ 0.2404217 ,  0.12939947, -0.22753999],
                            [ 0.2294054 ,  0.09066392, -0.26801434],
                            [-0.08279834, -0.00180671, -0.03885654],
                            [-0.11573286, -0.37074859, -0.02747816],
                            [-0.12386643, -0.71513229, -0.02041059],
                            [-0.15937553, -0.77797415, -0.1072425 ],
                            [ 0.07890022,  0.00946395, -0.04531941],
                            [ 0.13390415, -0.35440858, -0.0889498 ],
                            [ 0.16779588, -0.69500895, -0.12843374],
                            [ 0.20803406, -0.75239594, -0.21696281],
                            [-0.02637441,  0.53344496,  0.0016641 ],
                            [-0.04547316,  0.02500773, -0.19572269],
                            [-0.04231642,  0.09705815, -0.21392004],
                            [ 0.20918234,  0.04949726, -0.3158307 ],
                            [ 0.24527062,  0.02987425, -0.30533692]])

NON_OPT_POSE_R_MAT =  np.diag(np.array([0.        , 0.        , 0.        , 0.00118274, 0.00071942,
                                        0.00180195, 0.00458239, 0.00277782, 0.00685581, 0.00849735,
                                        0.00499614, 0.00985615, 0.00664774, 0.00420287, 0.00945318,
                                        0.01339637, 0.01119643, 0.01861952, 0.01476354, 0.03094928,
                                        0.02036437, 0.0169969 , 0.04010599, 0.02289611, 0.00638554,
                                        0.00426936, 0.00903538, 0.01382068, 0.01194884, 0.01796776,
                                        0.01459236, 0.03478806, 0.01953414, 0.01659145, 0.04493962,
                                        0.02202396, 0.00092379, 0.00050359, 0.00148355, 0.01230277,
                                        0.01084437, 0.01343743, 0.01465107, 0.01634931, 0.01835238,
                                        0.0152935 , 0.01711471, 0.01973736, 0.00096033, 0.00050073,
                                        0.00146349, 0.01224107, 0.0112485 , 0.0131369 , 0.01521024,
                                        0.01649282, 0.01914983, 0.01576249, 0.01722219, 0.02065466,
                                        0.00352361, 0.00214792, 0.0053286 , 0.0211525 , 0.05355913,
                                        0.02731685, 0.02053313, 0.04294094, 0.02493606, 0.02062349,
                                        0.06016838, 0.02651179, 0.01962443, 0.0481419 , 0.02421663]))

JOINTS_CMP_UPPER_BASIC = np.array([0, 1, 2, 20])
JOINTS_CMP_BASIC = np.array([0, 1, 2, 4, 8, 12, 16, 20])
JOINTS_CMP = np.array([0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20])
#12, 16
JOINTS_LOWER_BODY  = np.array([12, 13, 14, 15, 16, 17, 18, 19])
